volumes:
  n8n_storage2:
  postgres_storage:
  ollama_storage:
  qdrant_storage:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
    - DB_TYPE=sqlite
    - DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite
    # - DB_TYPE=postgresdb
    # - DB_POSTGRESDB_HOST=postgres
    # - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=host.docker.internal:11434
    - N8N_CUSTOM_EXTENSIONS=/home/node/custom
  volumes:
    - ./self-hosted-starter/n8n/demo-data:/demo-data
  env_file:
    - .env

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  # postgres:
  #   image: postgres:16-alpine
  #   hostname: postgres
  #   networks: ['demo']
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_USER
  #     - POSTGRES_PASSWORD
  #     - POSTGRES_DB
  #   volumes:
  #     - postgres_storage:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
  #     interval: 5s
  #     timeout: 5s
  #     retries: 10
  # n8n-import:
  #   <<: *service-n8n
  #   hostname: n8n-import
  #   container_name: n8n-import
  #   entrypoint: /bin/sh
  #   command:
  #     - "-c"
  #     - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
  #   volumes:
  #     - ./self-hosted-starter/n8n/demo-data:/demo-data
  #   depends_on:
  #     neo4j:
  #       condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      #- ./self-hosted-starter/n8n/node-data:/home/node/.n8n
      - ./self-hosted-starter/n8n/demo-data:/demo-data
      - ./self-hosted-starter/shared:/data/shared
      - ./self-hosted-starter/shared:/data/custom
      - ./:/home/node/custom
      #- ./.n8n:/home/node/.n8n
      - ./n8n_data:/home/node/.n8n
    entrypoint: /bin/sh
    command: 
      - "-c"
      - "n8n import:workflow --separate --input=/demo-data/workflows && n8n start"
    depends_on:
      neo4j:
        condition: service_healthy
    # n8n-import:
      # condition: service_completed_successfully

  # qdrant:
  #   image: qdrant/qdrant
  #   hostname: qdrant
  #   container_name: qdrant
  #   networks: ['demo']
  #   restart: unless-stopped
  #   ports:
  #     - 6333:6333
  #   environment:
  #     QDRANT__SERVICE__API_KEY: my_admin_api_key
  #   volumes:
  #     - qdrant_storage:/qdrant/storage

  neo4j:
    container_name: neo4j
    hostname: neo4j
    image: "neo4j:5.26.6-enterprise"
    networks: ['demo']
    # build:
      # dockerfile: Dockerfile
    # volumes:
      # - ./plugins:/plugins
      # - ./import:/import
    ports:
      - "7475:7474"
      - "7688:7687"
    environment:
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,algo.*
      # NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_allow__upgrade: true
      # NEO4J_dbms_default__database: neo4j
      NEO4J_AUTH: neo4j/apoc1234
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
      NEO4J_dbms_security_auth__enabled: false
    healthcheck:
      test: ["CMD-SHELL", "grep 'Remote interface available' /logs/neo4j.log || exit 1"]
      interval: 3s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd
